local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local localPlayer = Players.LocalPlayer
local boxSize = Vector3.new(4, 5.5, 2)
local yOffset = (boxSize.Y / 2) - 2.75

local appliedESP = {}
local espVisible = true

-- Toggle ESP on/off
local function setESPVisibility(visible)
	espVisible = visible
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= localPlayer then
			local character = player.Character
			if character then
				local espPart = character:FindFirstChild("FixedESPPart")
				if espPart then
					local box = espPart:FindFirstChildWhichIsA("SelectionBox")
					if box then
						box.Visible = visible
					end
				end
			end
		end
	end
end

-- Create ESP box for a character
local function createESP(character)
	if not character or character == localPlayer.Character then return end
	if character:FindFirstChild("FixedESPPart") then return end

	local root = character:FindFirstChild("HumanoidRootPart")
	if not root then return end

	local espPart = Instance.new("Part")
	espPart.Name = "FixedESPPart"
	espPart.Size = boxSize
	espPart.Anchored = true
	espPart.CanCollide = false
	espPart.Transparency = 1
	espPart.Parent = character

	local box = Instance.new("SelectionBox")
	box.Adornee = espPart
	box.Color3 = Color3.new(1, 1, 1) -- White
	box.LineThickness = 0.03
	box.SurfaceTransparency = 1
	box.Visible = espVisible
	box.Parent = espPart

	-- Update ESP position every frame
	RunService.RenderStepped:Connect(function()
		if character.Parent and root and espPart then
			espPart.CFrame = root.CFrame * CFrame.new(0, -yOffset, 0)
		end
	end)
end

-- Refresh ESP for all players every second
task.spawn(function()
	while true do
		for _, player in pairs(Players:GetPlayers()) do
			if player ~= localPlayer and not appliedESP[player] then
				player.CharacterAdded:Connect(function(character)
					task.wait(0.2)
					createESP(character)
				end)

				if player.Character then
					createESP(player.Character)
				end

				appliedESP[player] = true
			end
		end
		task.wait(1)
	end
end)

-- Listen for toggle key (T)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.T then
		setESPVisibility(not espVisible)
	end
end)



--// Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

--// References
local localPlayer = Players.LocalPlayer
local camera = Workspace.CurrentCamera

--// Settings
local toggleKey = Enum.KeyCode.V
local fovToggleKey = Enum.KeyCode.B
local smoothness = 1 -- Range: 0 (slow) to 1 (instant snap)

-- FOV Circle Settings
local fovRadius = 100 -- in pixels
local fovColor = Color3.fromRGB(255, 255, 255)
local fovTransparency = 0.5
local fovThickness = 2

-- Prediction Settings
local predictionEnabled = true
local predictionX = 0.1237
local predictionY = 0.1237
local predictionZ = 0.1237

--// State
local isLocked = false
local targetHead = nil
local fovVisible = true

--// FOV Circle UI (requires Drawing API)
local fovCircle = Drawing.new("Circle")
fovCircle.Radius = fovRadius
fovCircle.Color = fovColor
fovCircle.Thickness = fovThickness
fovCircle.Transparency = fovTransparency
fovCircle.Filled = false
fovCircle.Visible = fovVisible

--// Get closest player head within FOV circle
local function getClosestHeadInView()
	local closestHead = nil
	local closestDistance = math.huge

	for _, player in pairs(Players:GetPlayers()) do
		if player ~= localPlayer and player.Character then
			local head = player.Character:FindFirstChild("Head")
			if head then
				local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
				if onScreen then
					local distanceFromCenter = (Vector2.new(screenPos.X, screenPos.Y) - camera.ViewportSize / 2).Magnitude
					if distanceFromCenter <= fovRadius and distanceFromCenter < closestDistance then
						closestDistance = distanceFromCenter
						closestHead = head
					end
				end
			end
		end
	end

	return closestHead
end

--// Input handling
UserInputService.InputBegan:Connect(function(input, processed)
	if processed then return end

	if input.KeyCode == toggleKey then
		if isLocked then
			isLocked = false
			targetHead = nil
		else
			local head = getClosestHeadInView()
			if head then
				targetHead = head
				isLocked = true
			end
		end
	elseif input.KeyCode == fovToggleKey then
		fovVisible = not fovVisible
		fovCircle.Visible = fovVisible
	end
end)

--// Update FOV Circle and Rotate Camera
RunService.RenderStepped:Connect(function()
	-- Update FOV circle position to center of screen
	fovCircle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

	-- Camlock logic
	if isLocked and targetHead and targetHead:IsDescendantOf(Workspace) then
		local currentPos = camera.CFrame.Position
		local targetPos = targetHead.Position

		-- Axis-specific prediction
		if predictionEnabled then
			local character = targetHead.Parent
			if character and character:FindFirstChild("HumanoidRootPart") then
				local velocity = character.HumanoidRootPart.Velocity
				targetPos = targetPos + Vector3.new(
					velocity.X * predictionX,
					velocity.Y * predictionY,
					velocity.Z * predictionZ
				)
			end
		end

		local targetLook = CFrame.new(currentPos, targetPos)

		local currentRotation = camera.CFrame - currentPos
		local targetRotation = targetLook - targetLook.Position
		local newRotation = currentRotation:Lerp(targetRotation, smoothness)

		camera.CFrame = CFrame.new(currentPos) * newRotation
	else
		if not targetHead or not targetHead:IsDescendantOf(Workspace) then
			isLocked = false
			targetHead = nil
		end
	end
end)




local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer
local desiredSpeed = 180 -- Studs per second
local isSpeedOn = false

local keysPressed = {}

-- Toggle speed mode with E
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.E then
		isSpeedOn = not isSpeedOn
	end

	-- Track movement keys
	if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode.W or
		   input.KeyCode == Enum.KeyCode.A or
		   input.KeyCode == Enum.KeyCode.S or
		   input.KeyCode == Enum.KeyCode.D then
			keysPressed[input.KeyCode] = true
		end
	end
end)

UserInputService.InputEnded:Connect(function(input)
	-- Untrack released movement keys
	if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode.W or
		   input.KeyCode == Enum.KeyCode.A or
		   input.KeyCode == Enum.KeyCode.S or
		   input.KeyCode == Enum.KeyCode.D then
			keysPressed[input.KeyCode] = false
		end
	end
end)

-- Movement loop
RunService.RenderStepped:Connect(function(dt)
	if not isSpeedOn then return end

	local character = localPlayer.Character
	if not character or not character:FindFirstChild("HumanoidRootPart") then return end

	local rootPart = character.HumanoidRootPart
	local camera = workspace.CurrentCamera
	if not camera then return end

	local moveDirection = Vector3.zero

	-- Build direction vector based on keys
	if keysPressed[Enum.KeyCode.W] then
		moveDirection += camera.CFrame.LookVector
	end
	if keysPressed[Enum.KeyCode.S] then
		moveDirection -= camera.CFrame.LookVector
	end
	if keysPressed[Enum.KeyCode.D] then
		moveDirection += camera.CFrame.RightVector
	end
	if keysPressed[Enum.KeyCode.A] then
		moveDirection -= camera.CFrame.RightVector
	end

	-- Normalize and apply movement (ignore Y axis)
	if moveDirection.Magnitude > 0 then
		moveDirection = Vector3.new(moveDirection.X, 0, moveDirection.Z).Unit
		local moveDelta = moveDirection * desiredSpeed * dt
		rootPart.CFrame = rootPart.CFrame + moveDelta
	end
end)





-- LocalScript (for exploit environments with Drawing API)

local players = game:GetService("Players")
local uis = game:GetService("UserInputService")
local runService = game:GetService("RunService")
local camera = workspace.CurrentCamera
local localPlayer = players.LocalPlayer

local snaplines = {}
local snaplinesEnabled = false -- toggle state

-- Create a line
local function createLine()
    local line = Drawing.new("Line")
    line.Visible = true
    line.Thickness = 1
    line.Color = Color3.fromRGB(255, 255, 255)
    return line
end

-- Clear all snaplines
local function clearLines()
    for _, line in ipairs(snaplines) do
        line:Remove()
    end
    snaplines = {}
end

-- Toggle snaplines with "P" key
uis.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.P then
        snaplinesEnabled = not snaplinesEnabled
        if not snaplinesEnabled then
            clearLines()
        end
    end
end)

-- Render loop
runService.RenderStepped:Connect(function()
    if not snaplinesEnabled then return end

    clearLines()

    for _, player in pairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)

            if onScreen then
                local line = createLine()
                line.From = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y) -- bottom center
                line.To = Vector2.new(screenPos.X, screenPos.Y)
                table.insert(snaplines, line)
            end
        end
    end
end)





-- LocalScript (StarterPlayerScripts)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Settings
local ClickCooldown = 0.2 -- seconds between clicks
local AutoClickEnabled = false
local ToggleKey = Enum.KeyCode.Q

-- List of tool names to exclude from auto-clicking
local ExcludedToolNames = {
    "Knife",
}

local lastClickTime = 0

-- Check if tool name is in exclusion list
local function isExcludedTool(tool)
    if not tool then return false end
    for _, name in ipairs(ExcludedToolNames) do
        if tool.Name == name then
            return true
        end
    end
    return false
end

-- Function to check if cursor is on another player
local function isCursorOnPlayer()
    local target = Mouse.Target
    if not target then return false end

    local character = target:FindFirstAncestorOfClass("Model")
    local player = Players:GetPlayerFromCharacter(character)

    return player and player ~= LocalPlayer
end

-- Function to simulate a click
local function simulateClick()
    local tool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
    if isExcludedTool(tool) then return end

    if tool and tool:FindFirstChild("Activate") then
        tool:Activate()
    elseif tool then
        tool:Activate()
    else
        print("Click!")
    end
end

-- Toggle auto-clicking on/off with key
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    if input.KeyCode == ToggleKey then
        AutoClickEnabled = not AutoClickEnabled
        print("Auto Click: " .. (AutoClickEnabled and "Enabled" or "Disabled"))
    end
end)

-- Main loop: auto-click when cursor is on player and tool is allowed
RunService.RenderStepped:Connect(function()
    if AutoClickEnabled and isCursorOnPlayer() then
        local now = tick()
        if now - lastClickTime >= ClickCooldown then
            simulateClick()
            lastClickTime = now
        end
    end
end)
